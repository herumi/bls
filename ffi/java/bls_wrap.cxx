/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <bls/bls384_256.h>

#include "bls_impl.hpp"



/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< SecretKey > *new_std_vector_Sl_SecretKey_Sg___SWIG_2(jint count,SecretKey const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< SecretKey >(static_cast<std::vector< SecretKey >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_SecretKey_Sg__doCapacity(std::vector< SecretKey > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_SecretKey_Sg__doReserve(std::vector< SecretKey > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_SecretKey_Sg__doSize(std::vector< SecretKey > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_SecretKey_Sg__doAdd__SWIG_0(std::vector< SecretKey > *self,std::vector< SecretKey >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_SecretKey_Sg__doAdd__SWIG_1(std::vector< SecretKey > *self,jint index,std::vector< SecretKey >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< SecretKey >::value_type std_vector_Sl_SecretKey_Sg__doRemove(std::vector< SecretKey > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          SecretKey const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< SecretKey >::value_type const &std_vector_Sl_SecretKey_Sg__doGet(std::vector< SecretKey > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< SecretKey >::value_type std_vector_Sl_SecretKey_Sg__doSet(std::vector< SecretKey > *self,jint index,std::vector< SecretKey >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          SecretKey const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_SecretKey_Sg__doRemoveRange(std::vector< SecretKey > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< PublicKey > *new_std_vector_Sl_PublicKey_Sg___SWIG_2(jint count,PublicKey const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< PublicKey >(static_cast<std::vector< PublicKey >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_PublicKey_Sg__doCapacity(std::vector< PublicKey > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_PublicKey_Sg__doReserve(std::vector< PublicKey > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_PublicKey_Sg__doSize(std::vector< PublicKey > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_PublicKey_Sg__doAdd__SWIG_0(std::vector< PublicKey > *self,std::vector< PublicKey >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_PublicKey_Sg__doAdd__SWIG_1(std::vector< PublicKey > *self,jint index,std::vector< PublicKey >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< PublicKey >::value_type std_vector_Sl_PublicKey_Sg__doRemove(std::vector< PublicKey > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          PublicKey const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< PublicKey >::value_type const &std_vector_Sl_PublicKey_Sg__doGet(std::vector< PublicKey > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< PublicKey >::value_type std_vector_Sl_PublicKey_Sg__doSet(std::vector< PublicKey > *self,jint index,std::vector< PublicKey >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          PublicKey const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_PublicKey_Sg__doRemoveRange(std::vector< PublicKey > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Signature > *new_std_vector_Sl_Signature_Sg___SWIG_2(jint count,Signature const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Signature >(static_cast<std::vector< Signature >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Signature_Sg__doCapacity(std::vector< Signature > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_Signature_Sg__doReserve(std::vector< Signature > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_Signature_Sg__doSize(std::vector< Signature > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Signature_Sg__doAdd__SWIG_0(std::vector< Signature > *self,std::vector< Signature >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Signature_Sg__doAdd__SWIG_1(std::vector< Signature > *self,jint index,std::vector< Signature >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Signature >::value_type std_vector_Sl_Signature_Sg__doRemove(std::vector< Signature > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Signature const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Signature >::value_type const &std_vector_Sl_Signature_Sg__doGet(std::vector< Signature > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Signature >::value_type std_vector_Sl_Signature_Sg__doSet(std::vector< Signature > *self,jint index,std::vector< Signature >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Signature const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Signature_Sg__doRemoveRange(std::vector< Signature > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_init(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  try {
    init(arg1);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_isDefinedBLS_1ETH(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)isDefinedBLS_ETH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SecretKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SecretKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SecretKey *)new SecretKey();
  *(SecretKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SecretKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SecretKey *arg1 = 0 ;
  SecretKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return 0;
  } 
  result = (SecretKey *)new SecretKey((SecretKey const &)*arg1);
  *(SecretKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SecretKey_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SecretKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SecretKey *)new SecretKey(arg1);
  *(SecretKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  SecretKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return 0;
  } 
  result = (bool)((SecretKey const *)arg1)->equals((SecretKey const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  result = (bool)((SecretKey const *)arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  try {
    (arg1)->setStr((std::string const &)*arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->setStr((std::string const &)*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setInt(arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setByCSPRNG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  (arg1)->setByCSPRNG();
}


SWIGEXPORT jstring JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((SecretKey const *)arg1)->toString(arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  try {
    result = ((SecretKey const *)arg1)->toString();
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1deserialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->deserialize((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  std::string *arg2 = 0 ;
  std::string buf2 ;
  
  (void)jenv;
  (void)jcls;
  arg2=&buf2;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  try {
    ((SecretKey const *)arg1)->serialize(*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  {
    jresult = jenv->NewByteArray(arg2->size());
    jenv->SetByteArrayRegion(jresult, 0, arg2->size(), (const jbyte*)arg2->c_str());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setLittleEndian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->setLittleEndian((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setLittleEndianMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->setLittleEndianMod((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  SecretKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->add((SecretKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  SecretKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->sub((SecretKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  SecretKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->mul((SecretKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1neg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  (arg1)->neg();
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1getPublicKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  PublicKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey & is null");
    return ;
  } 
  ((SecretKey const *)arg1)->getPublicKey(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1getPublicKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  PublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  result = ((SecretKey const *)arg1)->getPublicKey();
  *(PublicKey **)&jresult = new PublicKey(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1sign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  Signature *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature & is null");
    return ;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  ((SecretKey const *)arg1)->sign(*arg2,(char const *)arg3,arg4);
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1signHash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  Signature *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature & is null");
    return ;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  ((SecretKey const *)arg1)->signHash(*arg2,(char const *)arg3,arg4);
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1sign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  Signature result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = ((SecretKey const *)arg1)->sign((char const *)arg2,arg3);
  *(Signature **)&jresult = new Signature(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1signHash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  SecretKey *arg1 = (SecretKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  Signature result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = ((SecretKey const *)arg1)->signHash((char const *)arg2,arg3);
  *(Signature **)&jresult = new Signature(result); 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1share(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  SecretKeyVec *arg2 = 0 ;
  SecretKey *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(SecretKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return ;
  } 
  arg3 = *(SecretKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->share((SecretKeyVec const &)*arg2,(SecretKey const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1recover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  SecretKeyVec *arg2 = 0 ;
  SecretKeyVec *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(SecretKey **)&jarg1; 
  arg2 = *(SecretKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return ;
  } 
  arg3 = *(SecretKeyVec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return ;
  } 
  (arg1)->recover((SecretKeyVec const &)*arg2,(SecretKeyVec const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKey_1setHashOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SecretKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->setHashOf((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_delete_1SecretKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SecretKey *arg1 = (SecretKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SecretKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_setGeneratorOfPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PublicKey *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return ;
  } 
  try {
    setGeneratorOfPublicKey((PublicKey const &)*arg1);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1PublicKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PublicKey *)new PublicKey();
  *(PublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1PublicKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicKey *arg1 = 0 ;
  PublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return 0;
  } 
  result = (PublicKey *)new PublicKey((PublicKey const &)*arg1);
  *(PublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  PublicKey *arg1 = (PublicKey *) 0 ;
  PublicKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicKey **)&jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return 0;
  } 
  result = (bool)((PublicKey const *)arg1)->equals((PublicKey const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PublicKey *arg1 = (PublicKey *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  result = (bool)((PublicKey const *)arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1setStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->setStr((std::string const &)*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PublicKey *arg1 = (PublicKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  try {
    result = ((PublicKey const *)arg1)->toString();
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1deserialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->deserialize((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  PublicKey *arg1 = (PublicKey *) 0 ;
  std::string *arg2 = 0 ;
  std::string buf2 ;
  
  (void)jenv;
  (void)jcls;
  arg2=&buf2;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  try {
    ((PublicKey const *)arg1)->serialize(*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  {
    jresult = jenv->NewByteArray(arg2->size());
    jenv->SetByteArrayRegion(jresult, 0, arg2->size(), (const jbyte*)arg2->c_str());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  PublicKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicKey **)&jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return ;
  } 
  (arg1)->add((PublicKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  PublicKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicKey **)&jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return ;
  } 
  (arg1)->sub((PublicKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  SecretKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicKey **)&jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->mul((SecretKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1neg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicKey **)&jarg1; 
  (arg1)->neg();
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1share(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  PublicKeyVec *arg2 = 0 ;
  SecretKey *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(PublicKey **)&jarg1; 
  arg2 = *(PublicKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return ;
  } 
  arg3 = *(SecretKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->share((PublicKeyVec const &)*arg2,(SecretKey const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKey_1recover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  PublicKeyVec *arg2 = 0 ;
  SecretKeyVec *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(PublicKey **)&jarg1; 
  arg2 = *(PublicKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return ;
  } 
  arg3 = *(SecretKeyVec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return ;
  } 
  (arg1)->recover((PublicKeyVec const &)*arg2,(SecretKeyVec const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_delete_1PublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PublicKey *arg1 = (PublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1Signature_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Signature *)new Signature();
  *(Signature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1Signature_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Signature *arg1 = 0 ;
  Signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature const & is null");
    return 0;
  } 
  result = (Signature *)new Signature((Signature const &)*arg1);
  *(Signature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  Signature *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature const & is null");
    return 0;
  } 
  result = (bool)((Signature const *)arg1)->equals((Signature const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  result = (bool)((Signature const *)arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1setStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Signature *arg1 = (Signature *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->setStr((std::string const &)*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Signature *arg1 = (Signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_com_herumi_bls_BlsJNI_Signature_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  try {
    result = ((Signature const *)arg1)->toString();
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1deserialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  Signature *arg1 = (Signature *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->deserialize((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_com_herumi_bls_BlsJNI_Signature_1serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  std::string *arg2 = 0 ;
  std::string buf2 ;
  
  (void)jenv;
  (void)jcls;
  arg2=&buf2;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  try {
    ((Signature const *)arg1)->serialize(*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return 0;
  }
  {
    jresult = jenv->NewByteArray(arg2->size());
    jenv->SetByteArrayRegion(jresult, 0, arg2->size(), (const jbyte*)arg2->c_str());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Signature *arg1 = (Signature *) 0 ;
  Signature *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature const & is null");
    return ;
  } 
  (arg1)->add((Signature const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Signature *arg1 = (Signature *) 0 ;
  Signature *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature const & is null");
    return ;
  } 
  (arg1)->sub((Signature const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Signature *arg1 = (Signature *) 0 ;
  SecretKey *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return ;
  } 
  (arg1)->mul((SecretKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1neg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Signature *arg1 = (Signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  (arg1)->neg();
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  PublicKey *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return 0;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  result = (bool)((Signature const *)arg1)->verify((PublicKey const &)*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1verifyHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  PublicKey *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return 0;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  result = (bool)((Signature const *)arg1)->verifyHash((PublicKey const &)*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1recover(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Signature *arg1 = (Signature *) 0 ;
  SignatureVec *arg2 = 0 ;
  SecretKeyVec *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(SignatureVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SignatureVec const & is null");
    return ;
  } 
  arg3 = *(SecretKeyVec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return ;
  } 
  (arg1)->recover((SignatureVec const &)*arg2,(SecretKeyVec const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1setHashOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  Signature *arg1 = (Signature *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Signature **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  try {
    (arg1)->setHashOf((char const *)arg2,arg3);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_Signature_1aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Signature *arg1 = (Signature *) 0 ;
  SignatureVec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(SignatureVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SignatureVec const & is null");
    return ;
  } 
  try {
    (arg1)->aggregate((SignatureVec const &)*arg2);
  } catch(std::exception &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1fastAggregateVerify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  PublicKeyVec *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(PublicKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return 0;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  result = (bool)((Signature const *)arg1)->fastAggregateVerify((PublicKeyVec const &)*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1aggregateVerifyNoCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  PublicKeyVec *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(PublicKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return 0;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  result = (bool)((Signature const *)arg1)->aggregateVerifyNoCheck((PublicKeyVec const &)*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_Signature_1aggregateVerify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jboolean jresult = 0 ;
  Signature *arg1 = (Signature *) 0 ;
  PublicKeyVec *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Signature **)&jarg1; 
  arg2 = *(PublicKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return 0;
  } 
  {
    if (jarg3) {
      arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0);
      arg4 = (size_t) jenv->GetArrayLength(jarg3);
    } else {
      arg3 = 0;
      arg4 = 0;
    }
  }
  result = (bool)((Signature const *)arg1)->aggregateVerify((PublicKeyVec const &)*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  {
    if (jarg3) jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg3, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_delete_1Signature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Signature *arg1 = (Signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Signature **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_share_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SecretKeyVec *arg1 = 0 ;
  SecretKey *arg2 = 0 ;
  SecretKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKeyVec **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return 0;
  } 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return 0;
  } 
  result = share((std::vector< SecretKey > const &)*arg1,(SecretKey const &)*arg2);
  *(SecretKey **)&jresult = new SecretKey(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_share_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  PublicKeyVec *arg1 = 0 ;
  SecretKey *arg2 = 0 ;
  PublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicKeyVec **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return 0;
  } 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return 0;
  } 
  result = share((std::vector< PublicKey > const &)*arg1,(SecretKey const &)*arg2);
  *(PublicKey **)&jresult = new PublicKey(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_recover_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SecretKeyVec *arg1 = 0 ;
  SecretKeyVec *arg2 = 0 ;
  SecretKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SecretKeyVec **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return 0;
  } 
  arg2 = *(SecretKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return 0;
  } 
  result = recover((std::vector< SecretKey > const &)*arg1,(std::vector< SecretKey > const &)*arg2);
  *(SecretKey **)&jresult = new SecretKey(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_recover_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  PublicKeyVec *arg1 = 0 ;
  SecretKeyVec *arg2 = 0 ;
  PublicKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicKeyVec **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKeyVec const & is null");
    return 0;
  } 
  arg2 = *(SecretKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return 0;
  } 
  result = recover((std::vector< PublicKey > const &)*arg1,(std::vector< SecretKey > const &)*arg2);
  *(PublicKey **)&jresult = new PublicKey(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_recover_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SignatureVec *arg1 = 0 ;
  SecretKeyVec *arg2 = 0 ;
  Signature result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SignatureVec **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SignatureVec const & is null");
    return 0;
  } 
  arg2 = *(SecretKeyVec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKeyVec const & is null");
    return 0;
  } 
  result = recover((std::vector< Signature > const &)*arg1,(std::vector< SecretKey > const &)*arg2);
  *(Signature **)&jresult = new Signature(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SignatureVec *arg1 = 0 ;
  Signature result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SignatureVec **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SignatureVec const & is null");
    return 0;
  } 
  result = aggregate((std::vector< Signature > const &)*arg1);
  *(Signature **)&jresult = new Signature(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_setETHserialization(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  setETHserialization(arg1);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_setMapToMode(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  setMapToMode(arg1);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_verifySignatureOrder(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  verifySignatureOrder(arg1);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_verifyPublicKeyOrder(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  verifyPublicKeyOrder(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SecretKeyVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< SecretKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< SecretKey > *)new std::vector< SecretKey >();
  *(std::vector< SecretKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SecretKeyVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< SecretKey > *arg1 = 0 ;
  std::vector< SecretKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< SecretKey > const & is null");
    return 0;
  } 
  result = (std::vector< SecretKey > *)new std::vector< SecretKey >((std::vector< SecretKey > const &)*arg1);
  *(std::vector< SecretKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  result = (bool)((std::vector< SecretKey > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SecretKeyVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  SecretKey *arg2 = 0 ;
  std::vector< SecretKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(SecretKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SecretKey const & is null");
    return 0;
  } 
  try {
    result = (std::vector< SecretKey > *)new_std_vector_Sl_SecretKey_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(SecretKey const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< SecretKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  try {
    result = std_vector_Sl_SecretKey_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_SecretKey_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  try {
    result = std_vector_Sl_SecretKey_Sg__doSize((std::vector< SecretKey > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  std::vector< SecretKey >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = *(std::vector< SecretKey >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< SecretKey >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_SecretKey_Sg__doAdd__SWIG_0(arg1,(SecretKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint arg2 ;
  std::vector< SecretKey >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< SecretKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< SecretKey >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_SecretKey_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(SecretKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint arg2 ;
  std::vector< SecretKey >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_SecretKey_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< SecretKey >::value_type **)&jresult = new std::vector< SecretKey >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint arg2 ;
  std::vector< SecretKey >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< SecretKey >::value_type *) &std_vector_Sl_SecretKey_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< SecretKey >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint arg2 ;
  std::vector< SecretKey >::value_type *arg3 = 0 ;
  std::vector< SecretKey >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< SecretKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< SecretKey >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_SecretKey_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(SecretKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< SecretKey >::value_type **)&jresult = new std::vector< SecretKey >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SecretKeyVec_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_SecretKey_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_delete_1SecretKeyVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< SecretKey > *arg1 = (std::vector< SecretKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< SecretKey > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1PublicKeyVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< PublicKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< PublicKey > *)new std::vector< PublicKey >();
  *(std::vector< PublicKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1PublicKeyVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< PublicKey > *arg1 = 0 ;
  std::vector< PublicKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PublicKey > const & is null");
    return 0;
  } 
  result = (std::vector< PublicKey > *)new std::vector< PublicKey >((std::vector< PublicKey > const &)*arg1);
  *(std::vector< PublicKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  result = (bool)((std::vector< PublicKey > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1PublicKeyVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  PublicKey *arg2 = 0 ;
  std::vector< PublicKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(PublicKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PublicKey const & is null");
    return 0;
  } 
  try {
    result = (std::vector< PublicKey > *)new_std_vector_Sl_PublicKey_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(PublicKey const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< PublicKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  try {
    result = std_vector_Sl_PublicKey_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_PublicKey_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  try {
    result = std_vector_Sl_PublicKey_Sg__doSize((std::vector< PublicKey > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  std::vector< PublicKey >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = *(std::vector< PublicKey >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PublicKey >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_PublicKey_Sg__doAdd__SWIG_0(arg1,(PublicKey const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint arg2 ;
  std::vector< PublicKey >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< PublicKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PublicKey >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_PublicKey_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(PublicKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint arg2 ;
  std::vector< PublicKey >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_PublicKey_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< PublicKey >::value_type **)&jresult = new std::vector< PublicKey >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint arg2 ;
  std::vector< PublicKey >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< PublicKey >::value_type *) &std_vector_Sl_PublicKey_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< PublicKey >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint arg2 ;
  std::vector< PublicKey >::value_type *arg3 = 0 ;
  std::vector< PublicKey >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< PublicKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PublicKey >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_PublicKey_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(PublicKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< PublicKey >::value_type **)&jresult = new std::vector< PublicKey >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_PublicKeyVec_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_PublicKey_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_delete_1PublicKeyVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< PublicKey > *arg1 = (std::vector< PublicKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< PublicKey > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SignatureVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Signature > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Signature > *)new std::vector< Signature >();
  *(std::vector< Signature > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SignatureVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Signature > *arg1 = 0 ;
  std::vector< Signature > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Signature > const & is null");
    return 0;
  } 
  result = (std::vector< Signature > *)new std::vector< Signature >((std::vector< Signature > const &)*arg1);
  *(std::vector< Signature > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  result = (bool)((std::vector< Signature > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_new_1SignatureVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Signature *arg2 = 0 ;
  std::vector< Signature > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Signature const & is null");
    return 0;
  } 
  try {
    result = (std::vector< Signature > *)new_std_vector_Sl_Signature_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(Signature const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Signature > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  try {
    result = std_vector_Sl_Signature_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_Signature_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  try {
    result = std_vector_Sl_Signature_Sg__doSize((std::vector< Signature > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  std::vector< Signature >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = *(std::vector< Signature >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Signature >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_Signature_Sg__doAdd__SWIG_0(arg1,(Signature const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint arg2 ;
  std::vector< Signature >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Signature >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Signature >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_Signature_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(Signature const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint arg2 ;
  std::vector< Signature >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_Signature_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Signature >::value_type **)&jresult = new std::vector< Signature >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint arg2 ;
  std::vector< Signature >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Signature >::value_type *) &std_vector_Sl_Signature_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Signature >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint arg2 ;
  std::vector< Signature >::value_type *arg3 = 0 ;
  std::vector< Signature >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Signature >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Signature >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_Signature_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(Signature const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Signature >::value_type **)&jresult = new std::vector< Signature >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_SignatureVec_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Signature_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_herumi_bls_BlsJNI_delete_1SignatureVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Signature > *arg1 = (std::vector< Signature > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Signature > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

